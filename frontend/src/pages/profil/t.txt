require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const Unternehmen = require("../models/Unternehmen");

const router = express.Router();

// âœ… EINFACH: Nur von Backend .env abhÃ¤ngig
const IS_TEST_MODE = process.env.STRIPE_TEST_MODE === 'true';
const STRIPE_KEY = IS_TEST_MODE ? process.env.STRIPE_TEST_SECRET_KEY : process.env.STRIPE_SECRET_KEY;

console.log('ðŸ”§ Stripe Mode:', IS_TEST_MODE ? 'TEST' : 'LIVE');

router.post('/create-stripe-session', async (req, res) => {
  const { amount, customerEmail, stripeAccountId, slug, provision } = req.body;
  
  console.log("DEBUG /create-stripe-session");
  console.log("Mode:", IS_TEST_MODE ? 'TEST' : 'LIVE');
  console.log("amount:", amount);
  console.log("customerEmail:", customerEmail);
  console.log("stripeAccountId:", stripeAccountId);
  console.log("slug:", slug);

  if (!amount || !customerEmail || !slug) {
    return res.status(400).json({ error: "amount, customerEmail und slug sind erforderlich" });
  }
  
  try {
    const stripeInstance = require('stripe')(STRIPE_KEY);
    const provisionRate = provision || 0.08;
    const provisionAmount = Math.round(amount * provisionRate);

    const sessionConfig = {
      payment_method_types: ['card'],
      line_items: [{
        price_data: {
          currency: 'eur',
          product_data: { name: 'Gutschein' },
          unit_amount: amount,
        },
        quantity: 1,
      }],
      mode: 'payment',
      customer_email: customerEmail,
      // âœ… FIX: Korrekte URL - checkout statt checkoutc
      success_url: `${process.env.DOMAIN}/checkout/${slug}?success=true&session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.DOMAIN}/checkout/${slug}?canceled=true`,
    };

    if (IS_TEST_MODE) {
      console.log('ðŸ§ª TEST MODE: Using own account');
      const session = await stripeInstance.checkout.sessions.create(sessionConfig);
      
      res.json({ 
        paymentUrl: session.url, 
        sessionId: session.id,
        testMode: IS_TEST_MODE 
      });
    } else {
      if (!stripeAccountId) {
        return res.status(400).json({ error: "stripeAccountId erforderlich fÃ¼r Live-Modus" });
      }
      sessionConfig.payment_intent_data = {
        application_fee_amount: provisionAmount
      };
      
      console.log('ðŸ’° LIVE MODE: Using connected account');
      const session = await stripeInstance.checkout.sessions.create(
        sessionConfig,
        {
          stripeAccount: stripeAccountId
        }
      );
      
      res.json({ 
        paymentUrl: session.url, 
        sessionId: session.id,
        testMode: IS_TEST_MODE 
      });
    }
  } catch (err) {
    console.error("Stripe-Fehler:", err);
    res.status(500).json({ error: err.message });
  }
});

router.get('/stripe-session-info', async (req, res) => {
  const { session_id, stripeAccountId } = req.query;
  if (!session_id) return res.status(400).json({ error: 'session_id erforderlich' });
  
  try {
    const stripeInstance = require('stripe')(STRIPE_KEY);
    
    if (IS_TEST_MODE) {
      const session = await stripeInstance.checkout.sessions.retrieve(session_id);
      res.json({
        amount: session.amount_total,
        customerEmail: session.customer_email
      });
    } else {
      const session = await stripeInstance.checkout.sessions.retrieve(
        session_id, 
        {
          stripeAccount: stripeAccountId
        }
      );
      res.json({
        amount: session.amount_total,
        customerEmail: session.customer_email
      });
    }
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

router.get('/test-mode-status', (req, res) => {
  res.json({ 
    testMode: IS_TEST_MODE,
    message: IS_TEST_MODE ? 'Test-Modus aktiv' : 'Live-Modus aktiv'
  });
});

router.post('/create-payment-intent', async (req, res) => {
  const { amount, customerEmail, stripeAccountId, slug, provision } = req.body;
  
  console.log("DEBUG /create-payment-intent");
  console.log("Mode:", IS_TEST_MODE ? 'TEST' : 'LIVE');
  console.log("amount:", amount);
  console.log("customerEmail:", customerEmail);
  console.log("stripeAccountId:", stripeAccountId);
  console.log("slug:", slug);

  if (!amount || !customerEmail || !slug) {
    return res.status(400).json({ error: "amount, customerEmail und slug sind erforderlich" });
  }
  
  try {
    const stripeInstance = require('stripe')(STRIPE_KEY);
    const provisionRate = provision || 0.08;
    const provisionAmount = Math.round(amount * provisionRate);

    const paymentIntentConfig = {
      amount: amount,
      currency: 'eur',
      customer_email: customerEmail, // FÃ¼r Receipts
      metadata: {
        slug: slug,
        customerEmail: customerEmail
      },
      automatic_payment_methods: {
        enabled: true,
      },
    };

    if (IS_TEST_MODE) {
      console.log('ðŸ§ª TEST MODE: Using own account');
      const paymentIntent = await stripeInstance.paymentIntents.create(paymentIntentConfig);
      
      res.json({ 
        clientSecret: paymentIntent.client_secret,
        testMode: IS_TEST_MODE 
      });
    } else {
      if (!stripeAccountId) {
        return res.status(400).json({ error: "stripeAccountId erforderlich fÃ¼r Live-Modus" });
      }
      
      // Connected Account: Application Fee hinzufÃ¼gen
      paymentIntentConfig.application_fee_amount = provisionAmount;
      
      console.log('ðŸ’° LIVE MODE: Using connected account');
      const paymentIntent = await stripeInstance.paymentIntents.create(
        paymentIntentConfig,
        {
          stripeAccount: stripeAccountId
        }
      );
      
      res.json({ 
        clientSecret: paymentIntent.client_secret,
        testMode: IS_TEST_MODE 
      });
    }
  } catch (err) {
    console.error("Stripe Payment Intent Fehler:", err);
    res.status(500).json({ error: err.message });
  }
});

// Webhook fÃ¼r Payment Intent (statt Checkout Session)
router.post('/stripe-webhook', express.raw({type: 'application/json'}), async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    const stripeInstance = require('stripe')(STRIPE_KEY);
    event = stripeInstance.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
  } catch (err) {
    console.log(`Webhook signature verification failed.`, err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'payment_intent.succeeded') {
    const paymentIntent = event.data.object;
    console.log('ðŸ’° Zahlung erfolgreich:', paymentIntent.id);
    console.log('ðŸ’° Betrag:', paymentIntent.amount / 100, 'EUR');
    console.log('ðŸ’° Customer:', paymentIntent.metadata?.customerEmail);
    console.log('ðŸ’° Slug:', paymentIntent.metadata?.slug);
    
    if (paymentIntent.application_fee_amount) {
      console.log('ðŸ’° Provision:', paymentIntent.application_fee_amount / 100, 'EUR');
    }

    // Hier kÃ¶nntest du zusÃ¤tzliche Verarbeitung machen
    // z.B. Gutschein in DB speichern, E-Mail senden etc.
  }

  res.json({received: true});
});

module.exports = router;